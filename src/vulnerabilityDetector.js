class VulnerabilityDetector {
  constructor() {
    this.vulnerabilities = [];
  }

  analyze(contractCode, filename) {
    this.vulnerabilities = [];
    this.filename = filename;
    
    this.checkReentrancy(contractCode);
    
    return {
      filename: this.filename,
      vulnerabilities: this.vulnerabilities,
      riskLevel: this.calculateRiskLevel()
    };
  }

  checkReentrancy(code) {
    const lines = code.split('\n');
    const externalCallPattern = /\.(call|send|transfer)\s*\(/;
    const stateChangePattern = /(balance\s*=|balances\[.*\]\s*=|\w+\s*=)/;

    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      
      if (externalCallPattern.test(line)) {
        for (let j = i + 1; j < Math.min(i + 10, lines.length); j++) {
          if (stateChangePattern.test(lines[j])) {
            this.vulnerabilities.push({
              type: 'REENTRANCY_RISK',
              severity: 'HIGH',
              line: i + 1,
              description: 'External call followed by state change - potential reentrancy vulnerability',
              recommendation: 'Use checks-effects-interactions pattern or reentrancy guard'
            });
            break;
          }
        }
      }
    }
  }

  calculateRiskLevel() {
    const highCount = this.vulnerabilities.filter(v => v.severity === 'HIGH').length;
    const mediumCount = this.vulnerabilities.filter(v => v.severity === 'MEDIUM').length;
    
    if (highCount > 0) return 'HIGH';
    if (mediumCount > 0) return 'MEDIUM';
    return 'LOW';
  }
}

module.exports = VulnerabilityDetector;